<?php

namespace App\Http\Controllers;

use App\Models\PartnerIpStat;
use App\Models\PartnerMerchant;
use App\Models\PartnerOwnerIp;
use App\Models\PartnerProgram;
use App\Models\PartnersAffiliate;
use App\Models\PartnersJoinPgm;
use App\Models\PartnersTranscation;
use App\Models\PartnerTextOld;
use App\Models\ProgramAffiliate;
use App\Models\VerifyToken;
use Carbon\Carbon;
use Illuminate\Http\Request;
use File;
use Illuminate\Support\Facades\DB;

class PartnersMerchantController extends Controller
{
    public function getPartners(Request $request)
    {
        $affiliate_key = $request->header('Api-Key');
        // to check this key belongs to which program affliate
        $partner_affliate = PartnersAffiliate::where('affiliate_secretkey',$affiliate_key)->first();
        if ($partner_affliate) {
            // check if cache file exists for partner for today date  --affiliate_secretkey-af
            //  i.e  current date-1a2v3a4z5c6h7a8t9b0ots2c5ri00pt-af
            //  if file exists return json from file
            //  if file does not exists run process create a new cache file for today date and return response
            
            $filename = $affiliate_key.'--'.now()->toDateString().'-af.json';

            if (file_exists( public_path()."/affiliateFile/".$filename)){
                try
                {
                    $contents = File::get(public_path()."/affiliateFile/".$filename);

                    return response()->json(['data'=> json_decode($contents)] ,201);

                }
                catch (Illuminate\Contracts\Filesystem\FileNotFoundException $exception)
                {
                    return response()->json('File text is Not Readable form', 404);
                }
            }
         
            /*
            // to get the  PartnersJoinPgm record  check the affliate id
            $partner_join_pgms = PartnersJoinPgm::where('joinpgm_affiliateid',$partner_affliate->affiliate_id )
            // to check the merchant_status is approved
            ->whereHas('merchant',function($query){
                $query->where('merchant_status','approved');
            })
            // to check the program_status is active
            ->whereHas('program',function($query){
                $query->where('program_status','active');
            })
               // to check the joinpgm_status is approved
            ->where('joinpgm_status','approved')->get();

            //var_dump($partner_join_pgms);

            // dd($partner_join_pgms);

            //  check if partner programs is not null
            if($partner_join_pgms ){

                $links =[];
                $search_worlds =[];
                $search_records =[];
                foreach($partner_join_pgms as $partner_join_pgm){
                    // we go to the partners_text_old table to get the link
                    // to check the text_status is active
                    if(!is_null($partner_join_pgm->program->text)){

                        if ($partner_join_pgm->program->text->text_status  =='active') {
                            // $link =  $partner_join_pgm->program->text->text_url;
                            $link = config('app.api_url')."/saveDetail?id=".$partner_join_pgm->program->text->text_id.'&key='.$affiliate_key;
                            // array_push($links, $new_link);
                            $search_world =   $partner_join_pgm->merchant->brands ?? $partner_join_pgm->merchant->brands;

                            if ($search_world !== "") {
                                array_push($search_records, (object) ['link'=>$link,'word' => $search_world]);
                            }
                        }
                    }
                    // return response()->json('Partners text is Not found', 404);
                }
                // return $search_records;
                $this->createFile($search_records,$affiliate_key);
                    return response()->json(['data'=> $search_records] ,201);

            }
            */


            
            /*
            $selectSql = " select m.brands, t.text_id from `partners_joinpgm` jp 
            left join `partners_merchant` m on jp.`joinpgm_merchantid` = m.`merchant_id` and m.`merchant_status` = 'approved'
            left join `partners_program` p on jp.`joinpgm_programid` = p.`program_id` and p.`program_status` = 'active'
            left join `partners_text_old` t on p.`program_id` = t.`text_programid` and t.`text_status` = 'active'
            where jp.joinpgm_affiliateid = ? and jp.joinpgm_status = 'approved' ";
            */

            $selectSql = " select m.brands, t.text_id from `partners_joinpgm` jp left join `partners_merchant` m on jp.`joinpgm_merchantid` = m.`merchant_id` left join `partners_program` p on jp.`joinpgm_programid` = p.`program_id` left join `partners_text_old` t on p.`program_id` = t.`text_programid` where jp.joinpgm_affiliateid = ? and jp.joinpgm_status = 'approved' and m.`merchant_status` = 'approved' and p.`program_status` = 'active' and t.`text_status` = 'active' order by m.brand_power asc ";

            $partner_join_pgms = DB::select($selectSql, [$partner_affliate->affiliate_id]);

            // dd($partner_join_pgms);

            //  check if partner programs is not null
            if($partner_join_pgms ){

                $usedWords = [];

                $links =[];
                $search_worlds =[];
                $search_records =[];
                foreach($partner_join_pgms as $partner_join_pgm){
                    // we go to the partners_text_old table to get the link
                    // to check the text_status is active
                    //if(!is_null($partner_join_pgm->program->text)){

                        //if ($partner_join_pgm->program->text->text_status  =='active') {
                            // $link =  $partner_join_pgm->program->text->text_url;
                            $link = config('app.api_url')."/saveDetail?id=".$partner_join_pgm->text_id.'&key='.$affiliate_key;
                            // array_push($links, $new_link);
                            $search_world =  $partner_join_pgm->brands;

                            if ($search_world !=="") {

                                $brandKeywords = explode("|", $search_world);

                                if(count($brandKeywords) > 1)
                                {
                                    foreach($brandKeywords as $brandKeyword)
                                    {
                                        if(!in_array($brandKeyword, $usedWords))
                                        {
                                            array_push($search_records, (object) ['i'=>$partner_join_pgm->text_id,'w' => $brandKeyword]);  
                                            
                                            $usedWords[] = $brandKeyword;
                                        }
                                    }
                                }
                                else{
                                    if(!in_array($search_world, $usedWords))
                                    {
                                        array_push($search_records, (object) ['i'=>$partner_join_pgm->text_id,'w' => $search_world]);

                                        $usedWords[] = $search_world;
                                    }
                                }
                            }
                        //}
                    //}
                    // return response()->json('Partners text is Not found', 404);
                }
                // return $search_records;
                $this->createFile($search_records,$affiliate_key);
                    return response()->json(['data'=> $search_records] ,201);

            }

            



            return response()->json('Partners Pgm is Not Active', 404);
        } else {
            return response()->json('Token Error', 404);
        }
    }

    public function getTokens(Request $request)
    {
        // Fetch all  verify_tokens
        $data = VerifyToken::all();
        return response()->json(['Partners Merchant', 'data' => $data, 201]);
    }

    public function saveDetail(Request $request)
    {
        // take the ip and link
        $user_ip = $request->ip();
        // text old table
        $text_old = PartnerTextOld::where('text_id',request()->id)->first();
        $partner_url = $text_old->text_url;

      
        // to check this key belongs to which program affliate
        $partner_affliate = PartnersAffiliate::where('affiliate_secretkey',$request->key)->first();

        if($partner_affliate->count()  >0){
            // table name partners_owner_auid_ip
            // save the record againist the record

            $data = PartnerIpStat::create([
                'ownerid'=>	$partner_affliate->affiliate_id,
                'AUIDS'=>'',
                'ipaddress'=> $user_ip, 
            ]);         
             
        $program_id = $text_old->text_programid;
        
        // get  partner_program table
        $program = PartnerProgram::where('program_id',$program_id)->first();

        //  to get the partnerjoinpgm table record
        $partner_join_pgm = PartnersJoinPgm::where('joinpgm_programid',$program_id)
        // ->where('joinpgm_merchantid', $program->program_merchantid)
        ->first();
         if(is_null($partner_join_pgm)){
            return response()->json(['messgage'=>'No JoinPgm  Found', 'data' => [], 400]);
         }   
// dd( $program->program_merchantid,$program_id);
        $partners_transaction=PartnersTranscation::create([
            'transaction_dateoftransaction' => now()->toDateString(),
            'transaction_dateofpayment' =>'0000-00-00',
            'transaction_adminpaydate' =>'0000-00-00',
            'transaction_subsaledate' => '0000-00-00',
            'transaction_reversedate' =>'0000-00-00',
            'transaction_transactiontime' => now()->format('Y-m-d H:i:s'),
            'transaction_joinpgmid' => $partner_join_pgm->joinpgm_id, 
            'transaction_type' =>'click',
            'transaction_status' =>'pending',
            'transaction_orderid' =>'',
            'transaction_country' =>'',
            'transaction_subid' =>'',
            'aiapproved' =>0,
            'aiscore' =>0,
            // 'transaction_linkid' =>,
            'transaction_referer' =>$request->url(),
            'transaction_ip' =>$request->ip(),
        ]);

            $new_link = str_replace('{CLICKID}', 'PW-'.$partners_transaction->id, $partner_url);
            return  redirect($new_link);
        }

        return response()->json(['messgage'=>'No key Found', 'data' => [], 400]);
    }

    public function countClick(Request $request)
    {   

        // text old table
        $text_old = PartnerTextOld::where('text_id',request()->id)->first();

        //  replace the
        $new_link = str_replace('{CLICKID}', 'LX-', $text_old->text_url);
        $program_id = $text_old->text_programid;
        
        // get  partner_program table
        $program = PartnerProgram::where('program_id',$program_id)->first();

        //  to get the partnerjoinpgm table record
        $partner_join_pgm = PartnersJoinPgm::where('joinpgm_programid',$program_id)
        ->where('joinpgm_merchantid', $program->program_merchantid)
        ->first();


        $partners_transaction=PartnersTranscation::create([
            'transaction_dateoftransaction' =>now()->format('y-m-d'),
            'transaction_transactiontime' =>now()->format('H:i:s'),
            'transaction_joinpgmid' => $partner_join_pgm->joinpgm_id, 
            'transaction_type' =>'click',
            'transaction_status' =>'pending',
            // 'transaction_linkid' =>,
            'transaction_referer' =>$request->url(),
            'transaction_ip' =>$request->ip(),
        ]);


        return redirect($text_old->text_url);
    }



    public function createFile($data,$key){

        $dirPath = public_path()."/affiliateFile/";
        $jsonFiles = scandir($dirPath, 1);

        foreach($jsonFiles as $file)
        {
            
            if(strpos($file, $key) !== false)
            {
                File::delete($dirPath.$file);
            }
        }
        
        //  creating new file
        $data = json_encode($data);
        $file = $key.'--'.now()->toDateString().'-af.json';
        $destinationPath=public_path()."/affiliateFile/";
        if (!is_dir($destinationPath)) {  mkdir($destinationPath,0777,true);  }
        File::put($destinationPath.$file,$data);
        return response()->download($destinationPath.$file);
      }
}
